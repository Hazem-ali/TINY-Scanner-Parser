# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainParserWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import qdarkstyle as theme
import Parser

class Ui_MainWindow(object):

    def __init__(self):
        self.theme_color = 'Light'
        self.snippet = ''  # TINY Snippet Code
        self.token_tuples = []  # List of tupeles

    def GUI_Color(self, theme_color):
        self.theme_color = theme_color
        Change_Theme(self.theme_color)
        self.StatusBar_Message('green', self.theme_color + " Mode Applied")
        return

    def StatusBar_Message(self, color, message):
        if self.theme_color == 'Light':
            self.statusBar.setStyleSheet("color : " + color)
        elif self.theme_color == 'Dark':
            self.statusBar.setStyleSheet("color : cyan")
        self.statusBar.showMessage(message, 4000)

    def ErrorDialog(self, error_message):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        msg.setText('Error' + ' '*60)
        msg.setInformativeText(error_message)
        msg.setWindowTitle("Error")
        msg.exec_()

    def OpenFile(self):
        # Load Data
        options = QtWidgets.QFileDialog.Options()
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow, "Open Text file", "", "Text Files (*.txt)", options=options)
        if fileName:
            self.StatusBar_Message("green", "File Opened")
            return fileName
        return

    def Bring_Data_From_File(self, fileName):
        # This function returns file data
        with open(fileName, 'r') as f:
            return f.read()
            # self.retrieved_xml = data
            # textbox.setPlainText(data)

    def Fill_TextBox(self, fileName, textBox):
        data = self.Bring_Data_From_File(fileName)
        textBox.setPlainText(data)

    def Open_Snippet(self):
        fileName = self.OpenFile()
        # make sure it is valid file
        if not fileName:
            return
        data = self.Bring_Data_From_File(fileName)
        self.Snippet_TextBox.setPlainText(data)

    def Open_Tokens(self):
        fileName = self.OpenFile()
        # make sure it is valid file
        if not fileName:
            return

            
        data = self.Bring_Data_From_File(fileName)
        

        self.Token_TextBox.setPlainText(data)
        # print(self.token_tuples)

    def Scan_Snippet(self):
        # TODO apply Scanning Algorithm
        self.snippet = self.Snippet_TextBox.toPlainText() 
        if self.snippet == '':
            self.ErrorDialog("No Snippet Code To Scan!")
            return


        data = self.Token_TextBox.toPlainText()
        self.Highlight_Text(len(data)-1, 0, self.Token_TextBox)
        self.StatusBar_Message('green', "Tokens Generated & Highlighted")
        return

    def Parse_Tokens(self):
        # TODO apply Parsing Algorithm
        token_data = self.Token_TextBox.toPlainText() 
        if token_data == '':
            self.ErrorDialog("No Tokens To Parse!")
            return

        
        extracted = token_data.split('\n')
        tokens = []
        for element in extracted:
            token = tuple(element.split(','))
            if('' in token or len(token) != 2):
                self.ErrorDialog("Incorrect Tokens")
                return
            tokens.append(token)
        
        self.token_tuples = tokens
        for i in self.token_tuples:
            print(i)
        self.StatusBar_Message('green', "Syntax Tree Generated")
        return

    def Highlight_Text(self, start, end, textbox):
        cur_format = QtGui.QTextCharFormat()
        # color = QtGui.QColor("#6495ED")
        # cur_format.setBackground(color)
        # indices = [(200,400),(700,1200),(2000,2500)]
        cursor = textbox.textCursor()
        cursor.setPosition(start)
        cursor.setPosition(end, QtGui.QTextCursor.KeepAnchor)
        cursor.setCharFormat(cur_format)
        textbox.setTextCursor(cursor)

    def Clear_Highlights(self, textbox):
        temp = QtWidgets.QPlainTextEdit()
        cursor = temp.textCursor()
        cursor.clearSelection()
        textbox.setTextCursor(cursor)
        del temp
        return

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 620)
        MainWindow.setMinimumSize(QtCore.QSize(800, 620))
        MainWindow.setMaximumSize(QtCore.QSize(800, 620))
        font = QtGui.QFont()
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        MainWindow.setFont(font)
        MainWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("tiny-logo.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Snippet_TextBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Snippet_TextBox.setGeometry(QtCore.QRect(20, 190, 371, 351))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.Snippet_TextBox.setFont(font)
        self.Snippet_TextBox.setMouseTracking(False)
        self.Snippet_TextBox.setTabStopDistance(20)
        self.Snippet_TextBox.setObjectName("Snippet_TextBox")
        self.Load_Snippet_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.Open_Snippet())
        self.Load_Snippet_Button.setGeometry(QtCore.QRect(79, 150, 131, 30))
        self.Load_Snippet_Button.setObjectName("Load_Snippet_Button")
        self.Token_TextBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Token_TextBox.setGeometry(QtCore.QRect(410, 190, 371, 351))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.Token_TextBox.setFont(font)
        self.Token_TextBox.setReadOnly(False)
        self.Token_TextBox.setTabStopDistance(20)
        self.Token_TextBox.setObjectName("Token_TextBox")
        self.Scan_Tiny_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.Scan_Snippet())
        self.Scan_Tiny_Button.setGeometry(QtCore.QRect(219, 150, 121, 30))
        self.Scan_Tiny_Button.setObjectName("Scan_Tiny_Button")
        self.Generate_Syntax_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.Parse_Tokens())
        self.Generate_Syntax_Button.setGeometry(
            QtCore.QRect(569, 150, 161, 30))
        self.Generate_Syntax_Button.setObjectName("Generate_Syntax_Button")
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(180, 10, 440, 61))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.Title.setFont(font)
        self.Title.setAutoFillBackground(False)
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setObjectName("Title")
        self.Load_Tokens_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.Open_Tokens())
        self.Load_Tokens_Button.setGeometry(QtCore.QRect(459, 150, 101, 30))
        self.Load_Tokens_Button.setObjectName("Load_Tokens_Button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuOpen = QtWidgets.QMenu(self.menubar)
        self.menuOpen.setObjectName("menuOpen")
        self.menuTheme = QtWidgets.QMenu(self.menubar)
        self.menuTheme.setObjectName("menuTheme")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        font3 = QtGui.QFont()
        font3.setBold(True)
        font3.setWeight(75)
        self.statusBar.setFont(font3)
        MainWindow.setStatusBar(self.statusBar)
        self.actionOpen_Snippet_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_Snippet_File.setObjectName("actionOpen_Snippet_File")
        self.actionOpen_Snippet_File.triggered.connect(
            lambda: self.Open_Snippet())
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionClose.triggered.connect(lambda: sys.exit())
        self.actionLight = QtWidgets.QAction(MainWindow)
        self.actionLight.setCheckable(False)
        self.actionLight.setChecked(False)
        self.actionLight.setObjectName("actionLight")
        self.actionLight.triggered.connect(lambda: self.GUI_Color("Light"))
        self.actionDark = QtWidgets.QAction(MainWindow)
        self.actionDark.setCheckable(False)
        self.actionDark.setChecked(False)
        self.actionDark.setObjectName("actionDark")
        self.actionDark.triggered.connect(lambda: self.GUI_Color("Dark"))

        self.actionOpen_Tokens_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_Tokens_File.setObjectName("actionOpen_Tokens_File")
        self.actionOpen_Tokens_File.triggered.connect(
            lambda: self.Open_Tokens())
        self.menuOpen.addAction(self.actionOpen_Tokens_File)
        self.menuOpen.addAction(self.actionOpen_Snippet_File)
        self.menuOpen.addSeparator()
        self.menuOpen.addAction(self.actionClose)
        self.menuTheme.addAction(self.actionLight)
        self.menuTheme.addAction(self.actionDark)
        self.menubar.addAction(self.menuOpen.menuAction())
        self.menubar.addAction(self.menuTheme.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TINY Compiler"))
        self.Snippet_TextBox.setPlaceholderText(
            _translate("MainWindow", "TINY Snippet Code..."))
        self.Load_Snippet_Button.setText(
            _translate("MainWindow", "Load Snippet"))
        self.Token_TextBox.setPlaceholderText(
            _translate("MainWindow", "Tokenvalue, Tokentype"))
        self.Scan_Tiny_Button.setText(
            _translate("MainWindow", "Scan TINY Code"))
        self.Generate_Syntax_Button.setText(
            _translate("MainWindow", "Generate Syntax Tree"))
        self.Title.setText(_translate("MainWindow", "TINY Compiler"))
        self.Load_Tokens_Button.setText(
            _translate("MainWindow", "Load Tokens"))
        self.menuOpen.setTitle(_translate("MainWindow", "File"))
        self.menuTheme.setTitle(_translate("MainWindow", "Theme"))
        self.actionOpen_Snippet_File.setText(
            _translate("MainWindow", "Open Snippet File"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionLight.setText(_translate("MainWindow", "Light"))
        self.actionDark.setText(_translate("MainWindow", "Dark"))

        self.actionOpen_Tokens_File.setText(
            _translate("MainWindow", "Open Tokens File"))


def Change_Theme(theme_color):

    # Change GUI Theme
    # get the QApplication instance,  or crash if not set
    app = QtWidgets.QApplication.instance()
    if app is None:
        raise RuntimeError("No Qt Application found.")

    if theme_color == "Dark":
        app.setStyleSheet(theme.load_stylesheet(palette=theme.DarkPalette))
    elif theme_color == "Light":
        app.setStyleSheet(theme.load_stylesheet(palette=theme.LightPalette))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    try:
        app.setStyleSheet(theme.load_stylesheet(palette=theme.LightPalette))
    except:
        pass
    sys.exit(app.exec_())
